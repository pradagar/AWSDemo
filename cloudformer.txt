{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "MyDemoVPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyDemoVPC"
          }
        ]
      }
    },
    "PubSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": "ap-southeast-1a",
        "VpcId": {
          "Ref": "MyDemoVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyDemoPub1"
          }
        ]
      }
    },
    "PubSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": "ap-southeast-1b",
        "VpcId": {
          "Ref": "MyDemoVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyDemoPub2"
          }
        ]
      }
    },
    "MyIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyDemoIG"
          }
        ]
      }
    },
    "dopt6f9dab08": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": "ap-southeast-1.compute.internal",
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ]
      }
    },
    "acl060d6ff590b5bf276": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "MyDemoVPC"
        }
      }
    },
    "MyRT1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "MyDemoVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyDemoRT"
          }
        ]
      }
    },
    "MyRT2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "MyDemoVPC"
        }
      }
    },
    "MyCDN": {
      "Type": "AWS::CloudFront::Distribution",
      "Properties": {
        "DistributionConfig": {
          "Enabled": true,
          "PriceClass": "PriceClass_All",
          "DefaultCacheBehavior": {
            "TargetOriginId": "S3-awsdemoforsa",
            "ViewerProtocolPolicy": "allow-all",
            "MinTTL": 0,
            "AllowedMethods": [
              "HEAD",
              "GET"
            ],
            "CachedMethods": [
              "HEAD",
              "GET"
            ],
            "ForwardedValues": {
              "Cookies": {
                "Forward": "none"
              }
            }
          },
          "Origins": [
            {
              "DomainName": "awsdemoforsa.s3.amazonaws.com",
              "Id": "S3-awsdemoforsa",
              "S3OriginConfig": {
              }
            }
          ],
          "Restrictions": {
            "GeoRestriction": {
              "RestrictionType": "none",
              "Locations": [

              ]
            }
          },
          "ViewerCertificate": {
            "CloudFrontDefaultCertificate": "true",
            "MinimumProtocolVersion": "TLSv1"
          }
        }
      }
    },
    "asgAWSDemoSG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          "ap-southeast-1a",
          "ap-southeast-1b"
        ],
        "Cooldown": "300",
        "DesiredCapacity": "1",
        "HealthCheckGracePeriod": "0",
        "HealthCheckType": "EC2",
        "MaxSize": "3",
        "MinSize": "1",
        "VPCZoneIdentifier": [
          {
            "Ref": "PubSubnet1"
          },
          {
            "Ref": "PubSubnet2"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "lcAWSDemoSG"
        },
        "TerminationPolicies": [
          "Default"
        ]
      }
    },
    "lcAWSDemoSG": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": "ami-0105903a30c74a56d",
        "InstanceType": "t2.micro",
        "KeyName": "AWSKeyPair",
        "SecurityGroups": [
          {
            "Ref": "sgWinSG"
          }
        ]
      }
    },
    "lcMyLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": "ami-0fb6b6f9e81056553",
        "InstanceType": "t2.micro",
        "KeyName": "AWSKeyPair",
        "SecurityGroups": [
          {
            "Ref": "sgAutoScalingSecurityGroup1"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdb",
            "Ebs": {
              "VolumeSize": 1
            }
          },
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "SnapshotId": "snap-01a65f0ed028c4aad",
              "VolumeSize": 8
            }
          }
        ]
      }
    },
    "LinuxWebServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": "ami-0602ae7e6b9191aea",
        "InstanceType": "t2.micro",
        "KeyName": "AWSKeyPair",
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyLinuxWebServer"
          }
        ],
        "Volumes": [
          {
            "Device": "/dev/sdb",
            "VolumeId": {
              "Ref": "volumevol0fb5bacc8d3c72159"
            }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PubSubnet1"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.1.34",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgLinuxSG"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
		"UserData": [
		  {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash \n",
				"yum update -y \n",
				"yum install httpd -y\n",
				"service httpd start\n",
				"chkconfig httpd on\n"
              ]
            ]
          }
		 }
		]
       }
      },
    
	"WindowsWebServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "DisableApiTermination": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "ImageId": "ami-0105903a30c74a56d",
        "InstanceType": "t2.micro",
        "KeyName": "AWSKeyPair",
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyWindowsWebServer"
          }
        ],
        "Volumes": [
          {
            "Device": "/dev/sdb",
            "VolumeId": {
              "Ref": "volumevol02776ca90b7b00ccb"
            }
          }
        ],
        "NetworkInterfaces": [
          {
            "DeleteOnTermination": "true",
            "Description": "Primary network interface",
            "DeviceIndex": 0,
            "SubnetId": {
              "Ref": "PubSubnet2"
            },
            "PrivateIpAddresses": [
              {
                "PrivateIpAddress": "10.0.2.127",
                "Primary": "true"
              }
            ],
            "GroupSet": [
              {
                "Ref": "sgWinSG"
              }
            ],
            "AssociatePublicIpAddress": "true"
          }
        ]
		"UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell>\n",
                "Set-ExecutionPolicy Unrestricted -Force\n",
				"New-Item -ItemType directory -Path 'C:\temp'\n",
 
				"# Install IIS and Web Management Tools.\n",
				"Import-Module ServerManager\n",
				"install-windowsfeature web-server, web-webserver -IncludeAllSubFeature\n",
				"install-windowsfeature web-mgmt-tools\n",
                "</powershell>\n"       
              ]
            ]
          }
        }
      }
    },
    "EBSVolWin": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "ap-southeast-1b",
        "Size": "1",
        "VolumeType": "gp2",
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyWindowsWebServer"
          }
        ]
      }
    },
    "EBSVolNix": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AvailabilityZone": "ap-southeast-1a",
        "Size": "1",
        "VolumeType": "gp2",
        "Tags": [
          {
            "Key": "Name",
            "Value": "LinuxWebServer"
          }
        ]
      }
    },
    "sgLinuxSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "launch-wizard-1 created 2019-06-22T09:48:51.177+05:30",
        "VpcId": {
          "Ref": "MyDemoVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AllowSSH"
          }
        ]
      }
    },
    "sgloadbalancerwizard1": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "load-balancer-wizard-1 created on 2019-06-22T12:09:27.212+05:30",
        "VpcId": {
          "Ref": "MyDemoVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "MyALBSG"
          }
        ]
      }
    },
    "sgWinSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "launch-wizard-2 created 2019-06-22T10:01:30.683+05:30",
        "VpcId": {
          "Ref": "MyDemoVPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "AllowRDP"
          }
        ]
      }
    },
	"ECSALB":{
      "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties":{
        "Name":"ECSALB",
        "Scheme":"internet-facing",
        "LoadBalancerAttributes":[
          {
            "Key":"idle_timeout.timeout_seconds",
            "Value":"30"
          }
        ],
        "Subnets":{
          {
            "Ref": "PubSubnet1"
          },
          {
            "Ref": "PubSubnet2"
          }
        },
        "SecurityGroups":[
          {
            "Ref":"sgloadbalancerwizard1"
          }
        ]
      }
    },
    "ALBListener":{
      "Type":"AWS::ElasticLoadBalancingV2::Listener",
      "Properties":{
        "DefaultActions":[
          {
            "Type":"forward",
            "TargetGroupArn":{
              "Ref":"ECSTG"
            }
          }
        ],
        "LoadBalancerArn":{
          "Ref":"ECSALB"
        },
        "Port":"80",
        "Protocol":"HTTP"
      }
    },
    "ECSALBListenerRule":{
      "Type":"AWS::ElasticLoadBalancingV2::ListenerRule",
      "DependsOn":"ALBListener",
      "Properties":{
        "Actions":[
          {
            "Type":"forward",
            "TargetGroupArn":{
              "Ref":"ECSTG"
            }
          }
        ],
        "Conditions":[
          {
            "Field":"path-pattern",
            "Values":[
              "/"
            ]
          }
        ],
        "ListenerArn":{
          "Ref":"ALBListener"
        },
        "Priority":1
      }
    },
    "ECSTG":{
      "Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
      "DependsOn":"ECSALB",
      "Properties":{
        "HealthCheckIntervalSeconds":10,
        "HealthCheckPath":"/index.html",
        "HealthCheckProtocol":"HTTP",
        "HealthCheckTimeoutSeconds":5,
        "HealthyThresholdCount":2,
        "Name":"ECSTG",
        "Port":80,
        "Protocol":"HTTP",
        "UnhealthyThresholdCount":2,
        "VpcId":{
          "Ref":"MyDemoVPC"
        }
      }
    },
    
  
    "scalingCPUThreshold": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "PolicyType": "TargetTrackingScaling",
        "StepAdjustments": [

        ],
        "AutoScalingGroupName": {
          "Ref": "asgAWSDemoSG"
        }
      }
    },
    "alarmTargetTrackingAWSDemoSGAlarmHigh77d2d844ed204e9da7708b83b1338f8b": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "AlarmDescription": "DO NOT EDIT OR DELETE. For TargetTrackingScaling policy arn:aws:autoscaling:ap-southeast-1:305974035055:scalingPolicy:1e61f450-3626-42f6-985e-a374ba30fe19:autoScalingGroupName/AWSDemoSG:policyName/CPUThreshold.",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "3",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "Statistic": "Average",
        "Threshold": "75.0",
        "AlarmActions": [
          {
            "Ref": "scalingCPUThreshold"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": "AWSDemoSG"
          }
        ]
      }
    },
    "alarmTargetTrackingAWSDemoSGAlarmLow2e6306ec56d3493d88bfe3032f6875c9": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ActionsEnabled": "true",
        "AlarmDescription": "DO NOT EDIT OR DELETE. For TargetTrackingScaling policy arn:aws:autoscaling:ap-southeast-1:305974035055:scalingPolicy:1e61f450-3626-42f6-985e-a374ba30fe19:autoScalingGroupName/AWSDemoSG:policyName/CPUThreshold.",
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": "15",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Period": "60",
        "Statistic": "Average",
        "Threshold": "52.5",
        "AlarmActions": [
          {
            "Ref": "scalingCPUThreshold"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": "AWSDemoSG"
          }
        ]
      }
    },
    "acl5": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "acl060d6ff590b5bf276"
        }
      }
    },
    "acl6": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "acl060d6ff590b5bf276"
        }
      }
    },
    "subnetacl6": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "acl060d6ff590b5bf276"
        },
        "SubnetId": {
          "Ref": "PubSubnet2"
        }
      }
    },
    "subnetacl7": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "acl060d6ff590b5bf276"
        },
        "SubnetId": {
          "Ref": "PubSubnet1"
        }
      }
    },
    "gw3": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "MyDemoVPC"
        },
        "InternetGatewayId": {
          "Ref": "MyIGW"
        }
      }
    },
    "subnetroute5": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "MyRT1"
        },
        "SubnetId": {
          "Ref": "PubSubnet2"
        }
      }
    },
    "subnetroute6": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "MyRT1"
        },
        "SubnetId": {
          "Ref": "PubSubnet2"
        }
      }
    },
    "route3": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "MyRT1"
        },
        "GatewayId": {
          "Ref": "MyIGW"
        }
      },
      "DependsOn": "gw3"
    },
    "dchpassoc3": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "MyDemoVPC"
        },
        "DhcpOptionsId": {
          "Ref": "dopt6f9dab08"
        }
      }
    },
    "ingress17": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgLinuxSG"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "SourceSecurityGroupId": {
          "Ref": "sgloadbalancerwizard1"
        },
        "SourceSecurityGroupOwnerId": "305974035055"
      }
    },
    "ingress18": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgLinuxSG"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "122.162.100.0/32"
      }
    },
    "ingress19": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgloadbalancerwizard1"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "ingress20": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgWinSG"
        },
        "IpProtocol": "tcp",
        "FromPort": "80",
        "ToPort": "80",
        "SourceSecurityGroupId": {
          "Ref": "sgloadbalancerwizard1"
        },
        "SourceSecurityGroupOwnerId": "305974035055"
      }
    },
    "ingress21": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgWinSG"
        },
        "IpProtocol": "tcp",
        "FromPort": "3389",
        "ToPort": "3389",
        "CidrIp": "122.162.100.0/32"
      }
    },
    "ingress22": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Ref": "sgAutoScalingSecurityGroup1"
        },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress12": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgLinuxSG"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress13": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgloadbalancerwizard1"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress14": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgWinSG"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    },
    "egress15": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties": {
        "GroupId": {
          "Ref": "sgAutoScalingSecurityGroup1"
        },
        "IpProtocol": "-1",
        "CidrIp": "0.0.0.0/0"
      }
    }
  },
  "Description": "AWS Demo for SA Template"
}